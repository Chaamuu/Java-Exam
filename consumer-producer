package lab6;

public class ProducerConsumer {
	public static void main(String[] args) {
		shop s=new shop();
		producer p=new producer(s,1);
		consumer c=new consumer(s,1);
		p.start();
		c.start();
	}
}

 class shop {
	 private int materials;
	 private boolean available=false;
	 public synchronized int get() {
		 while (available==false) {
			 try {
				 wait();
			 }
			 catch(InterruptedException ie) {
				 {}
			 }
		 }
		 available=false;
		 notifyAll();
		 return materials;
	 }
	 public synchronized void put(int value) {
		 while (available==true) {
			 try {
				 wait();
			 }
			 catch(InterruptedException ie) {
				 ie.printStackTrace();
			 }
		 }
		 materials=value;
		 available=true;
		 notifyAll();
	 }
 }
 
 class consumer extends Thread{
	 private shop shop;
	 private int number;
	 
	 public consumer(shop s,int number) {
		 shop=s;
		 this.number=number;
	 }
	 public void run() {
		 int value=0;
		 for(int i=0;i<10;i++) {
			 value=shop.get();
			 System.out.println("consumed value "+ this.number +" got: "+value);
		 }
	 }
 
	 }
 
 class producer extends Thread{
	 private shop shop;
	 int number;
	 
	 public producer(shop s,int number) {
		 shop =s;
		 this.number=number;
	 }
	 public void run() {
		 for(int i=0;i<10;i++) {
			 shop.put(i);
             System.out.println("Produced value " + this.number+ " put: " + i);
             try
             {
                   sleep( 1000);
             }
             catch (InterruptedException ie)
             {
                   ie.printStackTrace();
             }
             
		 }
	 }
 }

